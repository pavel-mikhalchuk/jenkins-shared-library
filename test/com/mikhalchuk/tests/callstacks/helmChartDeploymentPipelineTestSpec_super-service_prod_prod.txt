   helmChartDeploymentPipeline.getBinding()
   helmChartDeploymentPipeline.getBinding()
   helmChartDeploymentPipeline.getBinding()
   helmChartDeploymentPipeline.getBinding()
   helmChartDeploymentPipeline.call(groovy.lang.Closure)
      helmChartDeploymentPipeline.parameters([{$class=ChoiceParameter, choiceType=PT_SINGLE_SELECT, description=Docker image tags, filterLength=1, filterable=true, name=IMAGE_TAG, script={$class=GroovyScript, fallbackScript={classpath=[], sandbox=true, script=["error :("]}, script={classpath=[], sandbox=true, script=
                        import java.util.logging.Level 
                        import java.util.logging.Logger

                        import groovy.json.JsonSlurper

                        def log = Logger.getLogger("com.alutech.activechoice.dockerhub")

                        def parse = { response ->
                            log.info("Parsing response...")

                            def tags = response?.trim() ? new JsonSlurper().parseText(response).tags : []

                            log.info("Parsed!")

                            def hasLatest = tags.remove("latest")
                            return hasLatest ? tags.plus(0, ["latest"]) : tags
                        }

                        try {      
                            log.info("Start fetching tags from 'https://dockerhub-vip.alutech.local/v2/super-service/tags/list'")

                            Process process = ["curl", "-k", "https://dockerhub-vip.alutech.local/v2/super-service/tags/list"].execute()
                            
                            def out = new StringBuffer()
                            def err = new StringBuffer()
                            
                            process.consumeProcessOutput( out, err )
                            process.waitFor()
                            
                            if (out.size() > 0) {
                              log.info("Response from docker hub: " + out.toString())
                              
                              return parse(out.toString())
                            } else if (err.size() > 0) {
                              log.info(err.toString())

                              return ["there was an error during pulling data from dockerhub"]
                            }
                        } catch (Exception e) {
                            e.printStackTrace()
                        }
                    }}}])
      helmChartDeploymentPipeline.properties([null])
      helmChartDeploymentPipeline.pipeline(groovy.lang.Closure)
         helmChartDeploymentPipeline.agent(groovy.lang.Closure)
            helmChartDeploymentPipeline.label(helm-deploy)
         helmChartDeploymentPipeline.options(groovy.lang.Closure)
            helmChartDeploymentPipeline.logRotator({numToKeepStr=5})
            helmChartDeploymentPipeline.buildDiscarder(null)
            helmChartDeploymentPipeline.timestamps()
         helmChartDeploymentPipeline.parameters(groovy.lang.Closure)
            helmChartDeploymentPipeline.choice({name=NAMESPACE, choices=[prod], description=Kubernetes Namespace})
            helmChartDeploymentPipeline.text({name=RESOURCES, defaultValue=resources: null, description=Kubernetes POD resources requests and limits})
         helmChartDeploymentPipeline.stages(groovy.lang.Closure)
            helmChartDeploymentPipeline.stage(notify slack, groovy.lang.Closure)
               helmChartDeploymentPipeline.steps(groovy.lang.Closure)
                  helmChartDeploymentPipeline.script(groovy.lang.Closure)
                     helmChartDeploymentPipeline.sh({script=echo infra-$(date +"%d-%m-%Y_%H-%M-%S"), returnStdout=true})
                     helmChartDeploymentPipeline.script(groovy.lang.Closure)
                        helmChartDeploymentPipeline.wrap({$class=BuildUser}, groovy.lang.Closure)
                           helmChartDeploymentPipeline.slackSend({channel=java_services, color=good, message=*mikhalchuk* накатывает ветку *master* на *super-service prod*.
super-service:latest
Сохраняйте спокойствие 😌})
            helmChartDeploymentPipeline.stage(checkout infra repo, groovy.lang.Closure)
               helmChartDeploymentPipeline.steps(groovy.lang.Closure)
                  helmChartDeploymentPipeline.script(groovy.lang.Closure)
                     helmChartDeploymentPipeline.sh(mkdir infra-06-06-2020_06-06-06)
                     helmChartDeploymentPipeline.dir(infra-06-06-2020_06-06-06, groovy.lang.Closure)
                        helmChartDeploymentPipeline.git({credentialsId=jenkins, url=http://bb.alutech-mc.com:8080/scm/as/infra.git})
            helmChartDeploymentPipeline.stage(generate K8S manifests, groovy.lang.Closure)
               helmChartDeploymentPipeline.steps(groovy.lang.Closure)
                  helmChartDeploymentPipeline.container(helm, groovy.lang.Closure)
                     helmChartDeploymentPipeline.script(groovy.lang.Closure)
                        helmChartDeploymentPipeline.writeFile({file=kubernetes/helm-chart/super-service/values.yaml, text=replicaCount: "1"
gitBranch: "master"
image:
  repository: "dockerhub-vip.alutech.local"
  tag: "super-service:latest"
  pullPolicy: "IfNotPresent"
  additionalProperty: "super-service-image-additional-property"
service:
  externalPort: "80"
  internalPort: "8080"
jenkinsBuildNumber: "super-service-deploy-prod-666"
environment: "prod"
superServiceDatabase:
  password: "alex111"
host: "super-service.alutech24.com"
resources: null})
                        helmChartDeploymentPipeline.sh(rm -rf infra-06-06-2020_06-06-06/kube-prod/cluster-state/alutech-services/prod/super-service/raw-manifests)
                        helmChartDeploymentPipeline.sh(mkdir -p infra-06-06-2020_06-06-06/kube-prod/cluster-state/alutech-services/prod/super-service/raw-manifests)
                        helmChartDeploymentPipeline.sh(helm template --namespace prod --name super-service-prod kubernetes/helm-chart/super-service > 'infra-06-06-2020_06-06-06/kube-prod/cluster-state/alutech-services/prod/super-service/raw-manifests/kube-state.yaml')
            helmChartDeploymentPipeline.stage(push K8S manifests to infra repo, groovy.lang.Closure)
               helmChartDeploymentPipeline.steps(groovy.lang.Closure)
                  helmChartDeploymentPipeline.script(groovy.lang.Closure)
                     helmChartDeploymentPipeline.dir(infra-06-06-2020_06-06-06, groovy.lang.Closure)
                        helmChartDeploymentPipeline.usernamePassword({credentialsId=jenkins, passwordVariable=GIT_PASSWORD, usernameVariable=GIT_USERNAME})
                        helmChartDeploymentPipeline.withCredentials([{credentialsId=jenkins, passwordVariable=GIT_PASSWORD, usernameVariable=GIT_USERNAME}], groovy.lang.Closure)
                           helmChartDeploymentPipeline.sh(git config user.email "jenkins@infra.tower")
                           helmChartDeploymentPipeline.sh(git config user.name "Jenkins")
                           helmChartDeploymentPipeline.sh(git checkout master)
                           helmChartDeploymentPipeline.sh(git pull http://${GIT_USERNAME}:${GIT_PASSWORD}@bb.alutech-mc.com:8080/scm/as/infra.git HEAD:master)
                           helmChartDeploymentPipeline.sh(git add *)
                           helmChartDeploymentPipeline.sh(git commit -m "[jenkins]: ${JOB_NAME} - ${BUILD_NUMBER}")
                           helmChartDeploymentPipeline.sh(git push http://${GIT_USERNAME}:${GIT_PASSWORD}@bb.alutech-mc.com:8080/scm/as/infra.git HEAD:master)
            helmChartDeploymentPipeline.stage(notify ArgoCD, groovy.lang.Closure)
               helmChartDeploymentPipeline.steps(groovy.lang.Closure)
                  helmChartDeploymentPipeline.script(groovy.lang.Closure)
                     helmChartDeploymentPipeline.sh(curl -k -X POST https://git-events-publisher.in.in.alutech24.com/push)
